name: test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install latest stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Get rust version
        id: versions
        run: |
          echo "::set-output name=rustc::$(rustc --version | awk '{ print $2 }')"

      - name: Cache Rust dependencies
        uses: actions/cache@v2
        with:
          path: |
            target
            .cargo_home
            .cargo
          key: ${{ runner.os }}-no_pybindings-rust-${{ steps.versions.outputs.rustc }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-no_pybindings-rust-${{ steps.versions.outputs.rustc }}-

      - name: Lint with rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

      - name: Lint with clippy
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: "-D warnings"
        with:
          command: clippy
          args: --all-targets --all-features

      - name: Test in development mode
        uses: actions-rs/cargo@v1.0.1
        env:
          RUSTFLAGS: "-D warnings"
        with:
          command: test
          toolchain: stable

      - name: Test in release mode
        uses: actions-rs/cargo@v1.0.1
        env:
          RUSTFLAGS: "-D warnings"
        with:
          command: test
          toolchain: stable
          args: --release

      - name: Test in development mode (without default features)
        uses: actions-rs/cargo@v1.0.1
        env:
          RUSTFLAGS: "-D warnings"
        with:
          command: test
          toolchain: stable
          args: --no-default-features

      - name: Test in release mode (without default features)
        uses: actions-rs/cargo@v1.0.1
        env:
          RUSTFLAGS: "-D warnings"
        with:
          command: test
          toolchain: stable
          args: --release --no-default-features

  python-test:
    runs-on: ${{ matrix.os }}
    needs: rust-test
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        if: matrix.os != 'windows-latest' || matrix.python-version != '3.6'
        uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        if: matrix.os != 'windows-latest' || matrix.python-version != '3.6'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        if: matrix.os != 'windows-latest' || matrix.python-version != '3.6'
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry install

      - name: Install latest stable Rust
        if: matrix.os != 'windows-latest' || matrix.python-version != '3.6'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Get rust version
        if: matrix.os != 'windows-latest' || matrix.python-version != '3.6'
        id: versions
        run: |
          echo "::set-output name=rustc::$(rustc --version | awk '{ print $2 }')"

      - name: Cache Rust dependencies
        if: matrix.os != 'windows-latest' || matrix.python-version != '3.6'
        uses: actions/cache@v2
        with:
          path: |
            target
            .cargo_home
            .cargo
          key: ${{ runner.os }}-pybindings-rust-${{ steps.versions.outputs.rustc }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-pybindings-rust-${{ steps.versions.outputs.rustc }}-

      - name: Build Python package
        if: matrix.os != 'windows-latest' || matrix.python-version != '3.6'
        run: poetry run maturin develop --release '--cargo-extra-args=--features pybindings'

      - name: pytest
        if: matrix.os != 'windows-latest' || matrix.python-version != '3.6'
        run: poetry run pytest tests/python

  testall:
    runs-on: ubuntu-latest
    name: Meta job for all tests
    needs: [rust-test, python-test]
    steps:
      - name: Done
        run: echo "All tests successful."
